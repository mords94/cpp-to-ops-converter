module {
  cir.func @dot() -> f64 {
    %0 = cir.alloca f64, cir.ptr <f64>, ["__retval"] {alignment = 8 : i64} loc(#loc2)
    %1 = cir.alloca f64, cir.ptr <f64>, ["x", init] {alignment = 8 : i64} loc(#loc3)
    %2 = cir.alloca f64, cir.ptr <f64>, ["y", init] {alignment = 8 : i64} loc(#loc4)
    %3 = cir.alloca f64, cir.ptr <f64>, ["result", init] {alignment = 8 : i64} loc(#loc5)
    %4 = cir.cst(0.000000e+00 : f64) : f64 loc(#loc6)
    cir.store %4, %1 : f64, cir.ptr <f64> loc(#loc3)
    %5 = cir.cst(0.000000e+00 : f32) : f32 loc(#loc7)
    %6 = cir.cast(floating, %5 : f32), f64 loc(#loc7)
    cir.store %6, %2 : f64, cir.ptr <f64> loc(#loc4)
    %7 = cir.load %1 : cir.ptr <f64>, f64 loc(#loc8)
    %8 = cir.load %2 : cir.ptr <f64>, f64 loc(#loc9)
    %9 = cir.binop(mul, %7, %8) : f64 loc(#loc10)
    cir.store %9, %3 : f64, cir.ptr <f64> loc(#loc5)
    %10 = cir.load %3 : cir.ptr <f64>, f64 loc(#loc11)
    cir.store %10, %0 : f64, cir.ptr <f64> loc(#loc12)
    %11 = cir.load %0 : cir.ptr <f64>, f64 loc(#loc12)
    cir.return %11 : f64 loc(#loc12)
  } loc(#loc1)
} loc(#loc0)
#loc0 = loc(unknown)
#loc1 = loc(fused["./dot.c":1:1, "./dot.c":6:1])
#loc2 = loc("./dot.c":6:1)
#loc3 = loc(fused["./dot.c":2:3, "./dot.c":2:14])
#loc4 = loc(fused["./dot.c":3:3, "./dot.c":3:14])
#loc5 = loc(fused["./dot.c":4:3, "./dot.c":4:23])
#loc6 = loc("./dot.c":2:14)
#loc7 = loc("./dot.c":3:14)
#loc8 = loc("./dot.c":4:19)
#loc9 = loc("./dot.c":4:23)
#loc10 = loc(fused["./dot.c":4:19, "./dot.c":4:23])
#loc11 = loc("./dot.c":5:10)
#loc12 = loc(fused["./dot.c":5:3, "./dot.c":5:10])
