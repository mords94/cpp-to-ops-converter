#loc1 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":70:6)
#loc10 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":76:3)
#loc11 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":74:3)
#loc12 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":73:3)
#loc13 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":71:3)
#loc16 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":77:5)
module attributes {dlti.dl_spec = #dlti.dl_spec<#dlti.dl_entry<"dlti.endianness", "little">, #dlti.dl_entry<i64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f80, dense<128> : vector<2xi32>>, #dlti.dl_entry<i1, dense<8> : vector<2xi32>>, #dlti.dl_entry<i8, dense<8> : vector<2xi32>>, #dlti.dl_entry<i16, dense<16> : vector<2xi32>>, #dlti.dl_entry<i32, dense<32> : vector<2xi32>>, #dlti.dl_entry<f16, dense<16> : vector<2xi32>>, #dlti.dl_entry<f64, dense<64> : vector<2xi32>>, #dlti.dl_entry<f128, dense<128> : vector<2xi32>>>, llvm.data_layout = "e-m:o-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128", llvm.target_triple = "x86_64-apple-macosx14.0.0", "polygeist.target-cpu" = "penryn", "polygeist.target-features" = "+cx16,+cx8,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87", "polygeist.tune-cpu" = "generic"} {
  memref.global @im : memref<1xi32> loc(#loc0)
  memref.global @jm : memref<1xi32> loc(#loc0)
  func.func @ext_comp_vamax_(%arg0: memref<?xf32> loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":70:6), %arg1: memref<?xf32> loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":70:6), %arg2: memref<?xi32> loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":70:6), %arg3: memref<?xi32> loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":70:6)) attributes {llvm.linkage = #llvm.linkage<external>} {
    %c1_i32 = arith.constant 1 : i32 loc(#loc2)
    %c0_i32 = arith.constant 0 : i32 loc(#loc3)
    %cst = arith.constant 0.000000e+00 : f32 loc(#loc4)
    %c0 = arith.constant 0 : index loc(#loc5)
    %0 = llvm.mlir.undef : i32 loc(#loc5)
    %c0_0 = arith.constant 0 : index loc(#loc6)
    %1 = memref.load %arg0[%c0_0] : memref<?xf32> loc(#loc6)
    %2 = memref.get_global @jm : memref<1xi32> loc(#loc7)
    %c0_1 = arith.constant 0 : index loc(#loc7)
    %3 = memref.load %2[%c0_1] : memref<1xi32> loc(#loc7)
    %4 = memref.get_global @im : memref<1xi32> loc(#loc8)
    %5:4 = scf.while (%arg4 = %c0_i32, %arg5 = %0, %arg6 = %0, %arg7 = %cst) : (i32, i32, i32, f32) -> (i32, i32, f32, i32) {
      %6 = arith.cmpi slt, %arg4, %3 : i32 loc(#loc9)
      scf.condition(%6) %arg5, %arg6, %arg7, %arg4 : i32, i32, f32, i32 loc(#loc10)
    } do {
    ^bb0(%arg4: i32 loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":74:3), %arg5: i32 loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":73:3), %arg6: f32 loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":71:3), %arg7: i32 loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":76:3)):
      %c0_5 = arith.constant 0 : index loc(#loc8)
      %6 = memref.load %4[%c0_5] : memref<1xi32> loc(#loc8)
      %7 = arith.muli %arg7, %6 : i32 loc(#loc14)
      %8:4 = scf.while (%arg8 = %c0_i32, %arg9 = %arg4, %arg10 = %arg5, %arg11 = %arg6) : (i32, i32, i32, f32) -> (i32, i32, f32, i32) {
        %10 = arith.cmpi slt, %arg8, %6 : i32 loc(#loc15)
        scf.condition(%10) %arg9, %arg10, %arg11, %arg8 : i32, i32, f32, i32 loc(#loc16)
      } do {
      ^bb0(%arg8: i32 loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":74:3), %arg9: i32 loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":73:3), %arg10: f32 loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":71:3), %arg11: i32 loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":77:5)):
        %10 = arith.addi %arg11, %7 : i32 loc(#loc17)
        %11 = arith.index_cast %10 : i32 to index loc(#loc18)
        %12 = arith.addi %11, %c0 : index loc(#loc19)
        %13 = memref.load %arg1[%12] : memref<?xf32> loc(#loc19)
        %14 = arith.mulf %13, %1 : f32 loc(#loc20)
        %15 = arith.extf %14 : f32 to f64 loc(#loc19)
        %16 = math.absf %15 : f64 loc(#loc21)
        %17 = arith.extf %arg10 : f32 to f64 loc(#loc22)
        %18 = arith.cmpf ogt, %16, %17 : f64 loc(#loc23)
        %19 = arith.select %18, %arg7, %arg8 : i32 loc(#loc24)
        %20 = arith.select %18, %arg11, %arg9 : i32 loc(#loc24)
        %21 = scf.if %18 -> (f32) {
          %23 = memref.load %arg1[%12] : memref<?xf32> loc(#loc25)
          %24 = arith.extf %23 : f32 to f64 loc(#loc25)
          %25 = math.absf %24 : f64 loc(#loc26)
          %26 = arith.truncf %25 : f64 to f32 loc(#loc26)
          scf.yield %26 : f32 loc(#loc24)
        } else {
          scf.yield %arg10 : f32 loc(#loc24)
        } loc(#loc24)
        %22 = arith.addi %arg11, %c1_i32 : i32 loc(#loc2)
        scf.yield %22, %19, %20, %21 : i32, i32, i32, f32 loc(#loc16)
      } loc(#loc8)
      %9 = arith.addi %arg7, %c1_i32 : i32 loc(#loc27)
      scf.yield %9, %8#0, %8#1, %8#2 : i32, i32, i32, f32 loc(#loc10)
    } loc(#loc7)
    %c0_2 = arith.constant 0 : index loc(#loc28)
    memref.store %5#2, %arg0[%c0_2] : memref<?xf32> loc(#loc28)
    %c0_3 = arith.constant 0 : index loc(#loc29)
    memref.store %5#1, %arg2[%c0_3] : memref<?xi32> loc(#loc29)
    %c0_4 = arith.constant 0 : index loc(#loc30)
    memref.store %5#0, %arg3[%c0_4] : memref<?xi32> loc(#loc30)
    return loc(#loc31)
  } loc(#loc1)
} loc(#loc0)
#loc0 = loc(unknown)
#loc2 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":77:30)
#loc3 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":76:16)
#loc4 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":71:17)
#loc5 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":77:10)
#loc6 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":72:16)
#loc7 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":76:23)
#loc8 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":77:25)
#loc9 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":76:21)
#loc14 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/pom2k_c_header.h":5:43)
#loc15 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":77:23)
#loc17 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/pom2k_c_header.h":5:38)
#loc18 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":78:30)
#loc19 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":78:16)
#loc20 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":78:32)
#loc21 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":78:11)
#loc22 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":78:41)
#loc23 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":78:39)
#loc24 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":78:7)
#loc25 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":79:22)
#loc26 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":79:17)
#loc27 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":76:28)
#loc28 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":85:11)
#loc29 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":86:10)
#loc30 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":87:10)
#loc31 = loc("/Users/mac/Projects/mlir/cpp-to-ops-converter/script/..//in/test.c":88:1)

